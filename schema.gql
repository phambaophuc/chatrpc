# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateRoomInputDto {
  description: String
  name: String!
  type: RoomType!
}

input GetMessagesInputDto {
  limit: Int
  offset: Int
  roomId: String!
}

input JoinRoomInputDto {
  roomId: String!
}

input LoginInputDto {
  password: String!
  username: String!
}

type LoginResponseDto {
  token: String!
  user: UserDto!
  userId: String!
}

type MessageDto {
  content: String!
  id: String!
  isEdited: Boolean!
  replyTo: String
  replyToMessage: ReplyMessageDto
  roomId: String!
  timestamp: String!
  type: MessageType!
  user: MessageUserDto!
  userId: String!
}

enum MessageType {
  FILE
  IMAGE
  SYSTEM
  TEXT
}

type MessageUserDto {
  avatar: String
  id: String!
  username: String!
}

type Mutation {
  createRoom(input: CreateRoomInputDto!): RoomDto!
  deleteMessage(messageId: String!): Boolean!
  editMessage(content: String!, messageId: String!): MessageDto!
  joinRoom(input: JoinRoomInputDto!): Boolean!
  leaveRoom(roomId: String!): Boolean!
  login(input: LoginInputDto!): LoginResponseDto!
  logout: Boolean!
  markAsRead(roomId: String!): Boolean!
  register(input: RegisterInputDto!): LoginResponseDto!
  sendMessage(input: SendMessageInputDto!): MessageDto!
}

type Query {
  getRoomMessages(input: GetMessagesInputDto!): [MessageDto!]!
  getUnreadCount(roomId: String!): Int!
  myRooms: [RoomDto!]!
  publicRooms(limit: Int): [RoomDto!]!
}

input RegisterInputDto {
  email: String
  password: String!
  username: String!
}

type ReplyMessageDto {
  content: String!
  id: String!
  user: ReplyMessageUserDto!
}

type ReplyMessageUserDto {
  username: String!
}

type RoomDto {
  avatar: String
  createdAt: String!
  creatorId: String!
  description: String
  id: String!
  isActive: Boolean!
  memberCount: Int!
  name: String!
  type: RoomType!
  unreadCount: Int
  updatedAt: String!
}

enum RoomType {
  DIRECT
  PRIVATE
  PUBLIC
}

input SendMessageInputDto {
  content: String!
  replyTo: String
  roomId: String!
  type: MessageType
}

type Subscription {
  roomMessages(roomId: String!): MessageDto!
}

type UserDto {
  avatar: String
  email: String
  id: String!
  username: String!
}